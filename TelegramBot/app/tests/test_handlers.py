import os
import sys

import pytest
from unittest.mock import AsyncMock, patch, Mock
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from handlers import command_start_handler, add_first_link, send_concert, send_next_concert, Info


@pytest.mark.asyncio
async def test_command_start_handler():
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Message
    message = AsyncMock(spec=Message)

    # –º–æ–∫ message.from_user
    message.from_user = Mock()
    message.from_user.full_name = "Test User"

    # –¥–µ–ª–∞–µ–º AsyncMock message.answer
    message.answer = AsyncMock()

    state = AsyncMock(spec=FSMContext)

    await command_start_handler(message, state)

    message.answer.assert_any_call("–ü—Ä–∏–≤–µ—Ç, <b>Test User</b>!")
    state.set_state.assert_called_once_with(Info.link)


@pytest.mark.asyncio
async def test_add_first_link_valid():
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Message
    message = AsyncMock(spec=Message)
    message.text = "https://music.yandex.ru/users/testuser/playlists/123"

    # –î–µ–ª–∞–µ–º –º–µ—Ç–æ–¥ answer –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –º–æ–∫-–º–µ—Ç–æ–¥–æ–º
    message.answer = AsyncMock()

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ FSMContext (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞)
    state = AsyncMock(spec=FSMContext)

    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await add_first_link(message, state)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ update_data –≤—ã–∑–≤–∞–ª—Å—è —Å –Ω—É–∂–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    state.update_data.assert_any_call(link=message.text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ Info.city
    state.set_state.assert_called_once_with(Info.city)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–æ—Ä–æ–¥–∞
    message.answer.assert_called_once_with("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ:")


@pytest.mark.asyncio
async def test_add_first_link_invalid():
    message = AsyncMock(spec=Message)
    message.text = "invalid_link"
    state = AsyncMock(spec=FSMContext)
    message.answer = AsyncMock()

    await add_first_link(message, state)

    message.answer.assert_called_once_with("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ Yandex Music. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@pytest.mark.asyncio
async def test_send_next_concert():
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è callback –∏ –µ–≥–æ message
    callback = AsyncMock(spec=CallbackQuery)
    callback.message = AsyncMock(spec=Message)

    # –î–µ–ª–∞–µ–º callback.answer –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –º–æ–∫-–º–µ—Ç–æ–¥–æ–º
    callback.answer = AsyncMock()

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è FSMContext
    state = AsyncMock(spec=FSMContext)
    state.get_data.return_value = {
        'concerts': [
            {
                'concert_title': 'Artist 1',
                'datetime': '2024-05-01T20:00:00',
                'place': 'Venue 1',
                'address': 'Address 1',
                'afisha_url': 'http://example.com'
            }
        ]
    }

    # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏—é send_concert, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Ä–µ–∞–ª—å–Ω–æ
    with patch('handlers.send_concert', new_callable=AsyncMock) as mock_send_concert:
        await send_next_concert(callback, state)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è send_concert –Ω–µ –≤—ã–∑–≤–∞–ª–∞—Å—å (—Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ü–µ—Ä—Ç –æ–¥–∏–Ω)
        mock_send_concert.assert_not_called()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback.answer –≤—ã–∑–≤–∞–Ω —Å –Ω—É–∂–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        callback.answer.assert_any_call("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ü–µ—Ä—Ç!", show_alert=True)
        callback.answer.assert_any_call()
