import os
import sys

import pytest
from unittest.mock import AsyncMock, patch, Mock
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from handlers import command_start_handler, add_first_link, send_concert, send_next_concert, Info


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
@pytest.mark.asyncio
async def test_command_start_handler():
    message = AsyncMock(spec=Message)

    # –º–æ–∫ message.from_user, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –Ω–µ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    message.from_user = Mock()
    message.from_user.full_name = "Test User"

    message.answer = AsyncMock()

    state = AsyncMock(spec=FSMContext)

    await command_start_handler(message, state)

    message.answer.assert_any_call("–ü—Ä–∏–≤–µ—Ç, <b>Test User</b>!")
    state.set_state.assert_called_once_with(Info.link)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@pytest.mark.asyncio
async def test_add_first_link_valid():
    message = AsyncMock(spec=Message)
    message.text = "https://music.yandex.ru/users/testuser/playlists/123"

    message.answer = AsyncMock()
    state = AsyncMock(spec=FSMContext)

    await add_first_link(message, state)
    state.update_data.assert_any_call(link=message.text)
    state.set_state.assert_called_once_with(Info.city)
    message.answer.assert_called_once_with("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ:")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
@pytest.mark.asyncio
async def test_add_first_link_invalid():
    message = AsyncMock(spec=Message)
    message.text = "invalid_link"
    state = AsyncMock(spec=FSMContext)
    message.answer = AsyncMock()

    await add_first_link(message, state)

    message.answer.assert_called_once_with("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ Yandex Music. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤
@pytest.mark.asyncio
async def test_send_next_concert():
    callback = AsyncMock(spec=CallbackQuery)
    callback.message = AsyncMock(spec=Message)

    callback.answer = AsyncMock()
    state = AsyncMock(spec=FSMContext)
    state.get_data.return_value = {
        'concerts': [
            {
                'concert_title': 'Artist 1',
                'datetime': '2024-05-01T20:00:00',
                'place': 'Venue 1',
                'address': 'Address 1',
                'afisha_url': 'http://example.com'
            }
        ]
    }

    # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏—é send_concert, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Ä–µ–∞–ª—å–Ω–æ
    with patch('handlers.send_concert', new_callable=AsyncMock) as mock_send_concert:
        await send_next_concert(callback, state)

        mock_send_concert.assert_not_called()

        callback.answer.assert_any_call("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ü–µ—Ä—Ç!", show_alert=True)
        callback.answer.assert_any_call()
