from datetime import datetime

from aiogram import F, Router, html
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from config import SessionLocal
from models import *

import keyboards as kb
from constants import *
from music_parser import process_playlist

# import locale

router = Router()


# locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')


class Info(StatesGroup):
    link = State()
    city = State()
    artist = State()


current_concert_index = 0  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!")
    await state.set_state(Info.link)

    prompt_message = await message.answer(ADD_FIRST_PLAYLIST)
    await state.update_data(prompt_message_id=prompt_message.message_id)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç
@router.message(Info.link)
async def add_first_link(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')

    if prompt_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception as e:
            print(f"{ERROR_DELETING_PLAYLIST_REQUEST_MESSAGE} {e}")

    try:
        await message.delete()
    except Exception as e:
        print(f"{ERROR_DELETING_USER_PLAYLIST_MESSAGE} {e}")

    if message.text.startswith("https://music.yandex."):
        await state.update_data(link=message.text)
        await state.set_state(Info.city)

        prompt_message = await message.answer(ENTER_CITY_PROMPT)
        await state.update_data(prompt_message_id=prompt_message.message_id)
    else:
        await message.answer(INVALID_PLAYLIST_LINK)


# –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
@router.message(Info.city)
async def add_first_city(message: Message, state: FSMContext) -> None:
    global current_concert_index

    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')
    if prompt_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception as e:
            print(f"{ERROR_DELETE_CITY_REQUEST} {e}")

    try:
        await message.delete()
    except Exception as e:
        print(f"{ERROR_DELETE_USER_MESSAGE} {e}")

    waiting_message = await message.answer(WAIT_CONCERT_SEARCH)
    playlist_link = data.get('link')
    await state.update_data(city=message.text)
    concerts = process_playlist(playlist_link, message.text)[0]
    await state.update_data(concerts=concerts)

    try:
        await waiting_message.delete()
    except Exception as e:
        print(f"{ERROR_DELETE_WAIT_MESSAGE} {e}")

    await message.answer(FAVORITE_ARTISTS_CONCERTS)

    current_concert_index = 0
    await send_concert(message, concerts, current_concert_index)


# –ü—Ä–∏—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã
async def send_concert(message: Message, concerts, index: int):
    concert = concerts[index]
    concertTitle = concert['concert_title']
    datetimeRaw = concert['datetime']
    place = concert['place']
    address = concert['address']
    afishaUrl = concert['afisha_url']

    datetimeStr = datetimeRaw.split('+')[0]
    formattedDate = datetime.strptime(datetimeStr, "%Y-%m-%dT%H:%M:%S").strftime("%d %B %Y, %H:%M")

    total_concerts = len(concerts)
    counter_text = f"<b>{index + 1} –∏–∑ {total_concerts}</b>\n\n"

    messageText = CONCERT_MESSAGE_TEMPLATE.format(
        counter_text=counter_text,
        concert_title=concertTitle,
        formatted_date=formattedDate,
        place=place,
        address=address,
        afisha_url=afishaUrl
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=NEXT_CONCERT_MESSAGE, callback_data="next_concert")]
        ]
    )

    sent_message = await message.answer(messageText, parse_mode="HTML", reply_markup=keyboard)

    try:
        await message.delete()
    except Exception as e:
        print(f"{ERROR_DELETE_USER_MESSAGE} {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ"
@router.callback_query(lambda c: c.data == "next_concert")
async def send_next_concert(callback: CallbackQuery, state: FSMContext):
    global current_concert_index
    data = await state.get_data()
    concerts = data.get('concerts', [])

    if current_concert_index < len(concerts) - 1:
        current_concert_index += 1
        await send_concert(callback.message, concerts, current_concert_index)
    else:
        await callback.answer(LAST_CONCERT_MESSAGE, show_alert=True)

    await callback.answer()

async def add_playlist_to_db(message: Message, state: FSMContext) -> None:
    playlist_link = message.text
    user_telegram_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        artists = process_playlist(playlist_link, None)[1]

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            user = session.query(User).filter_by(user_telegram_id=user_telegram_id).first()
            if not user:
                user = User(user_telegram_id=user_telegram_id, city="–ù–µ —É–∫–∞–∑–∞–Ω")  # –ò–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–∑–∂–µ
                session.add(user)
                session.commit()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤
            for artist_name in artists:
                # –ò—â–µ–º –∞—Ä—Ç–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ
                artist_name = str(artist_name)
                artist = session.query(Artist).filter_by(artist_name=artist_name).first()

                # –ï—Å–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
                if not artist:
                    artist = Artist(artist_name=artist_name)
                    session.add(artist)
                    session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –±–∞–∑–µ

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∞—Ä—Ç–∏—Å—Ç–æ–º
                link_exists = session.query(ArtistsUsers).filter_by(
                    user_id=user.user_id,
                    artist_id=artist.artist_id
                ).first()

                # –ï—Å–ª–∏ —Å–≤—è–∑–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                if not link_exists:
                    session.add(ArtistsUsers(user_id=user.user_id, artist_id=artist.artist_id))
                    session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        await message.answer("–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞—Ä—Ç–∏—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()


# ________

# —Ä–∞–±–æ—á–∏–π —Å—Ç–∞—Ä—ã–π –∫–æ–¥ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã —Ä–∞–∑–æ–º)
# @router.message(Info.city)
# async def add_first_city(message: Message, state: FSMContext) -> None:
#     # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     data = await state.get_data()
#     playlist_link = data.get('link')
#     await state.update_data(city=message.text)
#     concerts = process_playlist(playlist_link, message.text)
#     for concert in concerts:
#         print(concert)
#         concertTitle = concert['concert_title']
#         datetimeRaw = concert['datetime']
#         place = concert['place']
#         address = concert['address']
#         afishaUrl = concert['afisha_url']
#
#         datetimeStr = datetimeRaw.split('+')[0]
#         formattedDate = datetime.strptime(datetimeStr, "%Y-%m-%dT%H:%M:%S").strftime("%d %B %Y, %H:%M")
#
#         messageText = (
#             f"{'üé§ –ê—Ä—Ç–∏—Å—Ç:'} {concertTitle}\n"
#             f"{'üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:'} {formattedDate}\n"
#             f"{'üè¢ –ü–ª–æ—â–∞–¥–∫–∞:'} {place}\n"
#             f"{'üìç –ê–¥—Ä–µ—Å:'} {address}\n\n"
#             f"–ù–∞–∂–º–∏—Ç–µ <a href=\"{afishaUrl}\">—Ç—ã–∫</a> –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞ üéüÔ∏è"
#         )
#
#         await message.answer(messageText, parse_mode="HTML")
#     await state.clear()
#     await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏", reply_markup=kb.main)


# ----------------------------------------------------------------------------------------------------------------------
# –î–û–ë–ê–í–ò–¢–¨ / –£–î–ê–õ–ò–¢–¨ / –ü–û–°–ú–û–¢–†–ï–¢–¨ –ì–û–†–û–î(–ê)
# ----------------------------------------------------------------------------------------------------------------------
class City(StatesGroup):
    add_city = State()
    del_city = State()


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ì–æ—Ä–æ–¥')
async def add_city_1(message: Message, state: FSMContext) -> None:
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(City.add_city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ—Å–µ—â–∞—Ç—å –∫–æ–Ω—Ü–µ—Ä—Ç—ã)")


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ì–æ—Ä–æ–¥')
async def del_city_1(message: Message, state: FSMContext) -> None:
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(City.del_city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞)")


@router.message(City.add_city)
async def add_city_2(message: Message, state: FSMContext) -> None:
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(city=message.text)
    # –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await state.clear()
    await message.reply("–ì–æ—Ä–æ–¥ –î–æ–±–∞–≤–ª–µ–Ω!")
    await message.answer("–î–æ—Å—Ç—É–ø–Ω–∞ –æ–ø—Ü–∏—è:", reply_markup=kb.reaction_on_cities)


@router.message(City.del_city)
async def del_city_2(message: Message, state: FSMContext) -> None:
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(city=message.text)
    # —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await state.clear()
    await message.reply("–ì–æ—Ä–æ–¥ –£–¥–∞–ª–µ–Ω!")
    await message.answer("–î–æ—Å—Ç—É–ø–Ω–∞ –æ–ø—Ü–∏—è:", reply_markup=kb.reaction_on_cities)


@router.callback_query(F.data == 'get_cities')
async def returning_cities(callback: CallbackQuery) -> None:
    await callback.answer("2")
    await callback.message.answer("2")
    # —Ç—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


# ----------------------------------------------------------------------------------------------------------------------
# –î–û–ë–ê–í–ò–¢–¨ / –£–î–ê–õ–ò–¢–¨ / –ü–û–°–ú–û–¢–†–ï–¢–¨ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø(–ï–ô)
# ----------------------------------------------------------------------------------------------------------------------
class Artist(StatesGroup):
    add_artist = State()
    del_artist = State()


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')
async def add_artist_1(message: Message, state: FSMContext) -> None:
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(Artist.add_artist)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —á—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å)")


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')
async def del_artist_1(message: Message, state: FSMContext) -> None:
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(Artist.del_artist)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω)")


@router.message(Artist.add_artist)
async def add_artist_2(message: Message, state: FSMContext) -> None:
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(artist=message.text)
    # –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await state.clear()
    await message.reply("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –î–æ–±–∞–≤–ª–µ–Ω!")
    await message.answer("–î–æ—Å—Ç—É–ø–Ω–∞ –æ–ø—Ü–∏—è:", reply_markup=kb.reaction_on_cities)


@router.message(Artist.del_artist)
async def del_artist_2(message: Message, state: FSMContext) -> None:
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(artist=message.text)
    # —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await state.clear()
    await message.reply("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –£–¥–∞–ª–µ–Ω!")
    await message.answer("–î–æ—Å—Ç—É–ø–Ω–∞ –æ–ø—Ü–∏—è:", reply_markup=kb.reaction_on_artists)


@router.callback_query(F.data == 'get_artists')
async def returning_cities(callback: CallbackQuery) -> None:
    await callback.answer("1")
    await callback.message.answer("1")
    # —Ç—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


# ----------------------------------------------------------------------------------------------------------------------
# –î–û–ë–ê–í–ò–¢–¨ / –£–î–ê–õ–ò–¢–¨ –ü–õ–ï–ô–õ–ò–°–¢(–´)
# ----------------------------------------------------------------------------------------------------------------------
class PlayList(StatesGroup):
    add_playlist = State()
    del_playlist = State()


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ü–ª–µ–π–ª–∏—Å—Ç')
async def add_artist_1(message: Message, state: FSMContext) -> None:
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(PlayList.add_playlist)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ü–ª–µ–π–ª–∏—Å—Ç, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã")


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ü–ª–µ–π–ª–∏—Å—Ç')
async def del_artist_1(message: Message, state: FSMContext) -> None:
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(PlayList.del_playlist)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ü–ª–µ–π–ª–∏—Å—Ç, –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—â–∞—Ç—å)")


@router.message(PlayList.add_playlist)
async def add_artist_2(message: Message, state: FSMContext) -> None:
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(artist=message.text)
    # –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await state.clear()
    await message.reply("–ü–ª–µ–π–ª–∏—Å—Ç –î–æ–±–∞–≤–ª–µ–Ω!")


@router.message(PlayList.del_playlist)
async def del_artist_2(message: Message, state: FSMContext) -> None:
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(artist=message.text)
    # —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await state.clear()
    await message.reply("–ü–ª–µ–π–ª–∏—Å—Ç –£–¥–∞–ª–µ–Ω!")
