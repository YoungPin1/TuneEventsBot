from datetime import datetime

from aiogram import F, Router, html
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from auxiliary_functions import checkCityInSet

import keyboards as kb
from config import SessionLocal
from constants import *
from models import *
from music_parser import process_playlist
from db_editor import add_users_city

# import locale

router = Router()


# locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')


class Info(StatesGroup):
    link = State()
    city = State()
    artist = State()


current_concert_index = 0  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞


#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_intro_message(message: Message):
    # await message.answer_sticker(STICKER_WELCOME)
    await message.answer(
        INTRO_MESSAGE_TEXT,
        reply_markup=kb.intro_keyboard
    )


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! üëã", parse_mode="HTML")


    # prompt_message = await message.answer(ADD_FIRST_PLAYLIST, parse_mode="HTML")
    # await state.update_data(prompt_message_id=prompt_message.message_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await send_intro_message(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"
@router.callback_query(F.data == "add_playlist")
async def add_playlist_button_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    await state.set_state(Info.city)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Info.city
    await state.update_data(action="add_city")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–µ–π—Å—Ç–≤–∏—è

    try:
        await callback_query.message.edit_text(
            ADD_FIRST_PLAYLIST,
            reply_markup=kb.back_keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
        prompt_message = await callback_query.message.answer(
            ADD_FIRST_PLAYLIST,
            reply_markup=kb.back_keyboard,
            parse_mode="HTML"
        )
        await state.update_data(prompt_message_id=prompt_message.message_id)
    else:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–æ—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ message_id
        await state.update_data(prompt_message_id=callback_query.message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_intro")
async def back_to_intro_handler(callback_query: CallbackQuery):
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ
    try:
        await callback_query.message.edit_text(
            INTRO_MESSAGE_TEXT,
            reply_markup=kb.intro_keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
        await callback_query.message.answer(
            INTRO_MESSAGE_TEXT,
            reply_markup=kb.intro_keyboard,
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üåç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
@router.callback_query(F.data == "change_city")
async def change_city_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Info.city –∏ —Ñ–ª–∞–≥ –¥–µ–π—Å—Ç–≤–∏—è "change_city"
    await state.set_state(Info.city)
    await state.update_data(action="change_city")  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–µ–π—Å—Ç–≤–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
    try:
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ:",
            reply_markup=kb.back_keyboard,
            parse_mode="HTML"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(prompt_message_id=callback_query.message.message_id)
    except Exception as e:
        print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
        prompt_message = await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ:",
            reply_markup=kb.back_keyboard,
            parse_mode="HTML"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(prompt_message_id=prompt_message.message_id)



# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç
@router.message(Info.link)
async def add_first_link(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')

    if prompt_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception as e:
            print(f"{ERROR_DELETING_PLAYLIST_REQUEST_MESSAGE} {e}")

    try:
        await message.delete()
    except Exception as e:
        print(f"{ERROR_DELETING_USER_PLAYLIST_MESSAGE} {e}")

    if message.text.startswith("https://music.yandex."):
        await state.update_data(link=message.text)
        await state.set_state(Info.city)

        prompt_message = await message.answer(ENTER_CITY_PROMPT)
        await state.update_data(prompt_message_id=prompt_message.message_id)
    else:
        await message.answer(INVALID_PLAYLIST_LINK)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.message(Info.city)
async def add_first_city(message: Message, state: FSMContext) -> None:
    global current_concert_index

    city_name = message.text.strip()
    user_telegram_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    action = data.get('action')
    prompt_message_id = data.get('prompt_message_id')

    if checkCityInSet(city_name, citySet):
        if action == "change_city":
            try:
                add_users_city(user_telegram_id, city_name)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ change_city: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞
            await message.answer("–í–∞—à –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.intro_keyboard)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if prompt_message_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=prompt_message_id,
                        text=INTRO_MESSAGE_TEXT,
                        reply_markup=kb.intro_keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
                    await message.answer(
                        INTRO_MESSAGE_TEXT,
                        reply_markup=kb.intro_keyboard,
                        parse_mode="HTML"
                    )
            else:
                await message.answer(
                    INTRO_MESSAGE_TEXT,
                    reply_markup=kb.intro_keyboard,
                    parse_mode="HTML"
                )
        elif action == "add_city":
            # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
            try:
                await message.delete()
            except Exception as e:
                print(f"{ERROR_DELETE_USER_MESSAGE} {e}")

            waiting_message = await message.answer(WAIT_CONCERT_SEARCH)
            playlist_link = data.get('link')
            await state.update_data(city=city_name)
            concerts = process_playlist(playlist_link, city_name)[0]
            await state.update_data(concerts=concerts)

            try:
                await waiting_message.delete()
            except Exception as e:
                print(f"{ERROR_DELETE_WAIT_MESSAGE} {e}")

            await message.answer(FAVORITE_ARTISTS_CONCERTS)

            current_concert_index = 0
            await send_concert(message, concerts, current_concert_index)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
    else:
        if action == "change_city":
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞
            if prompt_message_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=prompt_message_id,
                        text=(
                            "–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞:"
                        ),
                        reply_markup=kb.back_keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
                    await message.answer(
                        "–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞:",
                        reply_markup=kb.back_keyboard,
                        parse_mode="HTML"
                    )
            else:
                await message.answer(
                    "–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞:",
                    reply_markup=kb.back_keyboard,
                    parse_mode="HTML"
                )
        elif action == "add_city":
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
            if prompt_message_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=prompt_message_id,
                        text=(
                            "–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞:"
                        ),
                        reply_markup=kb.back_keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"{ERROR_EDIT_USER_MESSAGE} {e}")
                    await message.answer(
                        "–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞:",
                        reply_markup=kb.back_keyboard,
                        parse_mode="HTML"
                    )
            else:
                await message.answer(
                    "–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞:",
                    reply_markup=kb.back_keyboard,
                    parse_mode="HTML"
                )



# –ü—Ä–∏—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã
async def send_concert(message: Message, concerts, index: int):
    concert = concerts[index]
    concertTitle = concert['concert_title']
    datetimeRaw = concert['datetime']
    place = concert['place']
    address = concert['address']
    afishaUrl = concert['afisha_url']

    datetimeStr = datetimeRaw.split('+')[0]
    formattedDate = datetime.strptime(datetimeStr, "%Y-%m-%dT%H:%M:%S").strftime("%d %B %Y, %H:%M")

    total_concerts = len(concerts)
    counter_text = f"<b>{index + 1} –∏–∑ {total_concerts}</b>\n\n"

    messageText = CONCERT_MESSAGE_TEMPLATE.format(
        counter_text=counter_text,
        concert_title=concertTitle,
        formatted_date=formattedDate,
        place=place,
        address=address,
        afisha_url=afishaUrl
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=NEXT_CONCERT_MESSAGE, callback_data="next_concert")]
        ]
    )

    sent_message = await message.answer(messageText, parse_mode="HTML", reply_markup=keyboard)

    try:
        await message.delete()
    except Exception as e:
        print(f"{ERROR_DELETE_USER_MESSAGE} {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ"
@router.callback_query(lambda c: c.data == "next_concert")
async def send_next_concert(callback: CallbackQuery, state: FSMContext):
    global current_concert_index
    data = await state.get_data()
    concerts = data.get('concerts', [])

    if current_concert_index < len(concerts) - 1:
        current_concert_index += 1
        await send_concert(callback.message, concerts, current_concert_index)
    else:
        await callback.answer(LAST_CONCERT_MESSAGE, show_alert=True)

    await callback.answer()


async def add_playlist_to_db(message: Message, state: FSMContext) -> None:
    playlist_link = message.text
    user_telegram_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        artists = process_playlist(playlist_link, None)[1]

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            user = session.query(User).filter_by(user_telegram_id=user_telegram_id).first()
            if not user:
                user = User(user_telegram_id=user_telegram_id, city="–ù–µ —É–∫–∞–∑–∞–Ω")  # –ò–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–∑–∂–µ
                session.add(user)
                session.commit()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤
            for artist_name in artists:
                # –ò—â–µ–º –∞—Ä—Ç–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ
                artist_name = str(artist_name)
                artist = session.query(Artist).filter_by(artist_name=artist_name).first()

                # –ï—Å–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
                if not artist:
                    artist = Artist(artist_name=artist_name)
                    session.add(artist)
                    session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –±–∞–∑–µ

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∞—Ä—Ç–∏—Å—Ç–æ–º
                link_exists = session.query(ArtistsUsers).filter_by(
                    user_id=user.user_id,
                    artist_id=artist.artist_id
                ).first()

                # –ï—Å–ª–∏ —Å–≤—è–∑–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                if not link_exists:
                    session.add(ArtistsUsers(user_id=user.user_id, artist_id=artist.artist_id))
                    session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        await message.answer("–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞—Ä—Ç–∏—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
